#this line could tell the 'parser' how to format stuff it prints back out again
#%var%								%cmd%								%cmd_i%								%exact_val%
#										%val%								%val_i%

vsync_swap_interval =					1 ? 0 : -1;

controls = {
	.cam_mouselook_sens =				v2( rad(PI / 1600.0) );
	.cam_roll_vel =						45_deg;
	
	.cam_translate_vel =				2 ?
											v3(0.05) :
											v3(0.2) :
											v3(0.8) :
											v3(2.0);
	.cam_translate_fast_mult =			0 ?
											v3(4) :
											v3(8);
	
	.cam_fov_control_vel =				10_deg;
	.cam_fov_control_mw_vel =			10_deg / 4.0;
	
};

camera = {
	.pos_world =					#	v3(-29.2636, +5.4754, +0.1278)
									$	v3(+9.3011, -8.6856, +1.8853)
									$s	v3(+9.3011, -8.6856, +1.8853);
	.aer =							#
									$	deg(v3(+276.6378, +59.9624, +0.0000))
									$s	deg(v3(+276.6378, +59.9624, +0.0000));
	.base_ori =							quat(ident);
	
	.vfov =							#	+100_deg
									$	+75.0000_deg
									$i	+75.0000_deg;
									
	.clip_near =						1.0/16.0;
	.clip_far =							4096;
	
};

passes = {
	.main_pass_clear_col =				1 ?	srgb(1) :
											col(0.01) :
											col(0.2) :
											srgb(120,175,193);
	
	.bloom_intensity =					1.0;
	
	#.bloom_size = [5] {					1.0/45.0,	1.0/12.0,	1.0/2.5,	1.0,		3.0 };
	.bloom_size = [5] {					1.0/45.0,	1.0/12.0,	1.0/2.0,	2.0,		6.0 };
	.bloom_res_scale = [5] {			1,			2,			3,			4,			5 };
	#.bloom_coeff = [5] {				5.0,		4.0,		1.1,		1.0,		1.0 };
	.bloom_coeff = [5] {				1.0,		1.0,		1.0,		1.0,		1.0 };
	
	.shadow_res =						1024; # desktop 1024, notebook 256
};

env_viewer = {
	.illuminance_res =					32;
	.luminance_res =					512;
	.luminance_prefilter_levels =		8;
	.luminance_prefilter_base_samples =	256;
	
	.cur_humus_indx =					#112
									$	8
									$s	8;
	## Favorites:
	# 107 			Stairs					Green Djungle Temple Stairs			
	# 13 			CoitTower2				
	# 112			SwedishRoyalCastle		lots of little streetlights			
	# 16			DallasW					hotel room							
	# 17			Earth					
	# 23			Footballfield2			Nice glass reflections				
	
	.cur_sibl_indx =				#	28
									$	42
									$s	42;
	## Favorites:
	# 30			PaperMill_Ruins_E		
									
	.sibl =							$s	false;
};

saved_cameras =				$s [10] {
	{ v3(+0.0000, +0.0000, +0.0000), deg(v3(+0.0000, +90.0000, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +75.0000_deg, +0.0625, +4096.0000 },
	{ v3(-5.3431, +10.3094, +4.2653), deg(v3(+222.9748, +94.7250, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +75.0000_deg, +0.0625, +4096.0000 },
	{ v3(-3.0146, +14.7940, +2.4786), deg(v3(+323.0999, +61.4250, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +75.0000_deg, +0.0625, +4096.0000 },
	{ v3(-8.0351, +11.8640, +2.7462), deg(v3(+226.9120, +112.8375, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +31.4723_deg, +0.0625, +4096.0000 },
	{ v3(-8.9871, +15.0229, +3.8790), deg(v3(+188.3250, +85.5000, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +75.0000_deg, +0.0625, +4096.0000 },
	{ v3(-32.9769, -0.9168, +3.0770), deg(v3(+121.6124, +85.5000, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +75.0000_deg, +0.0625, +4096.0000 },
	{ v3(-39.5219, -7.2646, +2.3952), deg(v3(+56.7000, +81.6750, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +75.0000_deg, +0.0625, +4096.0000 },
	{ v3(-41.1552, -5.9980, +1.8753), deg(v3(+46.8000, +74.2500, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +75.0000_deg, +0.0625, +4096.0000 },
	{ v3(+0.0000, +0.0000, +0.0000), deg(v3(+0.0000, +90.0000, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +75.0000_deg, +0.0625, +4096.0000 },
	{ v3(+0.0000, +0.0000, +0.0000), deg(v3(+0.0000, +90.0000, +0.0000)), quat(v3(+0.0000, +0.0000, +0.0000), +1.0000), +75.0000_deg, +0.0625, +4096.0000 }
};

### Scene

{#
	.cube_rot_vel =						deg(0 ? +20 : 0);
	.sphere_rot_vel =					-6_deg;
#}

material_showcase_grid_steps =			uv2(7, 3);
#material_showcase_grid_mat =			m2(	+1, 0,
#											 0,-1 ); # !!!!!!! BROKEN because var_file.hpp has not implemented matrix handling yet

{#
scenes =								[] {
	{#Scene#}{	.name =							"shadow_test_0";
		.pos =							$s	v3(-46.6174, +3.8187, +0.9977);
		.ori =							$s	quat(v3(-0.0013, +0.0014, -0.7383), +0.6745);
		.children =						[] {
			
			{#Light#}{	.type =		0;	.name =		"Test dir light";
				.pos =						$s	v3(+5.4736, -1.8077, +2.4948);
				.ori =						$s	quat(v3(+0.3753, +0.4900, +0.6247), +0.4784);
				.power =						srgb(244,217,171) * col(2000);
				.flags =						0;
			},
			
			{#Mesh#}{	.name =						"shadow_test_0_mesh";
				.pos =						$s	v3(0);
				.ori =						$s	quat(ident);
				.children =				[] {
					
					{#Light#}{	.type =		1;	.name =	"Test point light 1";
						.pos =					$s	v3(+0.9410, +1.2415, +1.1063);
						.ori =						quat(ident);
						.power =					srgb(200,48,79) * col(100);
						.flags =					2;
					},
					{#Light#}{	.type =		1;	.name =	"Test point light 2";
						.pos =					$s	v3(+1.0914, +0.5582, +1.3377);
						.ori =						quat(ident);
						.power =					srgb(48,200,79) * col(100);
						.flags =					2;
					},
					{#Light#}{	.type =		1;	.name =	"Test point light 3";
						.pos =					$s	v3(+0.3245, +0.7575, +1.0226);
						.ori =						quat(ident);
						.power =					srgb(48,79,200) * col(100);
						.flags =					2;
					},
					
				};
			},
			{#Mesh#}{	.name =						"Window_Pillar";
				.pos =						$s	v3(+3.7783, -5.7335, +0.0000);
				.ori =						$s	quat(v3(+0.0005, -0.0004, -0.6161), +0.7877);
				.children =				[] {
					
					{#Light#}{	.type =		1;	.name =	"Torch light L";
						.pos =					$s	v3(+4.5799, -6.4858, +1.9066);
						.ori =						quat(ident);
						.power =					srgb(240,142,77) * col(60);
						.flags =					2;
					},                      
					{#Light#}{	.type =		1;	.name =	"Torch light R";
						.pos =					$s	v3(+4.1454, -4.6933, +1.8854);
						.ori =						quat(ident);
						.power =					srgb(240,142,77) * col(60);
						.flags =					2;
					},
					
				};
			},
			{#Mesh#}{	.name =						"Nanosuit";
				.pos =						$s	v3(-0.6927, -1.1003, +0.5381);
				.ori =						$s	quat(v3(+0.0049, -0.0048, -0.6973), +0.7167);
			},	
			
		};
	},
};
#}

### Assets
{# shaders = [] {
	#???
}; #}

materials = [] { # enum map
	#struct is  v3:albedo 	flt:metallic	flt:roughness	flt:IOR=1.5
	#%name% # Autogenerated enum-map names
	{# MAT_IDENTITY			#}			{ col(1),					1.0,	1.0 }, # since everything acts as a multipler for optional texture values, this makes it so that the material is controlled with textures (NOTE: IOR is default)
	
	{# MAT_WHITENESS		#}			{ col(0.920, 0.920, 0.920),	0.10,	0.50 }, # NOTE: default values are still not implemented, so if IOR is ever set here it will override the default permanetly
	{# MAT_TERRAIN			#}			{ col(0.644, 0.770, 0.476),	0.00,	0.85 };
	{# MAT_GLASS			#}			{ col(1.000, 1.000, 1.000),	0.00,	0.08 },
	{# MAT_PLASTIC			#}			{ col(0.004, 0.005, 0.005),	0.00,	0.24 },
	{# MAT_SHINY_PLATINUM	#}			{ col(0.300, 0.307, 0.307),	1.00,	0.08 },
	{# MAT_GRASS			#}			{ col(1),					0.00,	0.55 },
	{# MAT_RUSTY_METAL		#}			{ col(1),					0.50,	0.60 },
	{# MAT_BLOTCHY_METAL	#}			{ col(1),					0.95,	0.34 },
	{# MAT_GRIPPED_METAL	#}			{ col(1),					0.95,	0.34 },
	{# MAT_DIRT				#}			{ col(1),					0.00,	0.70 },
	{# MAT_TREE_BARK		#}			{ col(0.600, 0.513, 0.435), 0.00,	0.85 },
	{# MAT_TREE_CUTS		#}			{ col(1.000, 0.855, 0.725), 0.00,	0.70 },
	{# MAT_TREE_BLOSSOMS	#}			{ srgb(213,146,222),		0.00,	0.88 },
	{# MAT_OBELISK			#}			{ col(1),					0.35,	0.70 },
	{# MAT_MARBLE			#}			{ col(1),					0.0,	0.30 },
	{# MAT_WOODEN_BEAM		#}			{ col(0.898, 0.741, 0.698),	0.0,	0.70 },
	{# MAT_WOODEN_BEAM_CUTS	#}			{ col(0.878, 0.729, 0.690),	0.0,	0.60 },
	{# MAT_LIGHTBULB		#}			{ col(0.400, 0.400, 0.400),	0.20,	0.08 },
	
	{# MAT_SHOW_PLASTIC		#}			{ srgb(236,44,130),			0.0,	0.24,	1.419 }, # IOR=1.419 -> F0=0.03
	{# MAT_SHOW_GLASS		#}			{ srgb(0.04,0.07,0.02),		0.0,	0.08,	1.419 }, # IOR=1.419 -> F0=0.03
	{# MAT_SHOW_PLASIC_H	#}			{ srgb(215,160,41),			0.0,	0.80,	1.576 }, # IOR=1.576 -> F0=0.05
	{# MAT_SHOW_RUBY		#}			{ srgb(226,14,37),			0.0,	0.05,	1.789 }, # IOR=1.789 -> F0=0.08
	{# MAT_SHOW_DIAMOND		#}			{ srgb(101,176,239),		0.0,	0.03,	2.403 }, # IOR=2.403 -> F0=0.17
	{# MAT_SHOW_IRON		#}			{ col(0.56, 0.57, 0.58),	1.0,	0.18 };
	{# MAT_SHOW_COPPER		#}			{ col(0.95, 0.64, 0.54),	1.0,	0.38 },
	{# MAT_SHOW_GOLD		#}			{ col(1.00, 0.71, 0.29),	1.0,	0.28 },
	{# MAT_SHOW_ALU			#}			{ col(0.91, 0.92, 0.92),	1.0,	0.24 },
	{# MAT_SHOW_SILVER		#}			{ col(0.95, 0.93, 0.88),	1.0,	0.09 },
};

mesh_names = [] {
	#%name%
	{# MSH_nouv_AXIS_CROSS_PX			#}	"axis_cross_px.nouv",
	{# MSH_nouv_AXIS_CROSS_NX			#}	"axis_cross_nx.nouv",
	{# MSH_nouv_AXIS_CROSS_PY			#}	"axis_cross_py.nouv",
	{# MSH_nouv_AXIS_CROSS_NY			#}	"axis_cross_ny.nouv",
	{# MSH_nouv_AXIS_CROSS_PZ			#}	"axis_cross_pz.nouv",
	{# MSH_nouv_AXIS_CROSS_NZ			#}	"axis_cross_nz.nouv",
	{# MSH_nouv_AXIS_CROSS_PLANE_XY		#}	"axis_cross_plane_xy.nouv",
	{# MSH_nouv_SPHERE					#}	"_unit_sphere.nouv",
	
	{# MSH_nouv_STRUCTURE_RING			#}	"structure_ring.nouv",
	{# MSH_nouv_TERRAIN					#}	"terrain.nouv",
	{# MSH_nouv_UTAHTEAPOT				#}	"utahTeapot.nouv",
	
	{# MSH_nouv_PLANETARIUM				#}	"planetarium.nouv",
	{# MSH_nouv_PLANETARIUM_PROJECTOR	#}	"planetarium_projector.nouv",
	
	{# MSH_nouv_ICO_SPHERE				#}	"_ico_sphere.nouv",
	{# MSH_nouv_STFD_BUNNY				#}	"stanford/bunny.nouv",
	{# MSH_nouv_STFD_BUDDHA				#}	"stanford/buddha.nouv",
	{# MSH_nouv_STFD_DRAGON				#}	"stanford/dragon.nouv",
	
	{# MSH_nouv_WINDOW_PILLAR			#}	"window_pillar.nouv",
	{# MSH_nouv_SHADOW_TEST_0			#}	"shadow_test_0.nouv",
	
	
	{# MSH_nouv_col_LIGHT_BULB			#}	"light_bulb.nouv_vcol",
	{# MSH_nouv_col_SUN_LAMP			#}	"sun_lamp.nouv_vcol",
	
	
	{# MSH_uv_tang_UNIT_PLANE			#}	"_unit_plane.uv_tang",
	
	{# MSH_uv_tang_SCENE_GROUND0		#}	"scene_ground0.uv_tang",
	{# MSH_uv_tang_UGLY					#}	"ugly.uv_tang",
	{# MSH_uv_tang_TERRAIN_TREE			#}	"terrain_tree.uv_tang", # implement ternary
	{# MSH_uv_tang_TERRAIN_TREE_CUTS	#}	"terrain_tree_cuts.uv_tang",
	{# MSH_uv_tang_TERRAIN_TREE_BLOSSOMS	#}	"terrain_tree_blossoms.uv_tang",
	{# MSH_uv_tang_TERRAIN_CUBE			#}	"terrain_cube.uv_tang",
	{# MSH_uv_tang_TERRAIN_SPHERE		#}	"terrain_sphere.uv_tang",
	{# MSH_uv_tang_TERRAIN_OBELISK		#}	"terrain_obelisk.uv_tang",
	{# MSH_uv_tang_STRUCTURE_WALLS		#}	"structure_walls.uv_tang",
	{# MSH_uv_tang_STRUCTURE_GROUND		#}	"structure_ground.uv_tang",
	{# MSH_uv_tang_STRUCTURE_BLOCK1		#}	"structure_block1.uv_tang",
	{# MSH_uv_tang_STRUCTURE_BLOCK2		#}	"structure_block2.uv_tang",
	{# MSH_uv_tang_STRUCTURE_BLOCK3		#}	"structure_block3.uv_tang",
	{# MSH_uv_tang_STRUCTURE_BLOCK4		#}	"structure_block4.uv_tang",
	{# MSH_uv_tang_STRUCTURE_BEAM		#}	"structure_beam.uv_tang",
	{# MSH_uv_tang_STRUCTURE_BEAM_CUTS	#}	"structure_beam_cuts.uv_tang",
	
	{# MSH_uv_tang_NANOSUIT_TORSO		#}	"nano_suit/nanosuit_torso.uv_tang",
	{# MSH_uv_tang_NANOSUIT_LEGS		#}	"nano_suit/nanosuit_legs.uv_tang",
	{# MSH_uv_tang_NANOSUIT_NECK		#}	"nano_suit/nanosuit_neck.uv_tang",
	{# MSH_uv_tang_NANOSUIT_HELMET		#}	"nano_suit/nanosuit_helmet.uv_tang",
	
	{# MSH_uv_tang_NORM_TEST_00			#}	"norm_test/test_00.uv_tang",
	
	{# MSH_uv_tang_CERBERUS				#}	"cerberus/cerberus.uv_tang",
	
	{# MSH_uv_tang_PG_DAVID				#}	"photogr/david.uv_tang",
};


tex.names = [] {
	#%name%
	
	{# TEX_MAT_ROUGHNESS							#}	"ugly_roughness.linear_r",
	{# TEX_GRASS									#}	"grass_00",
	{# TEX_TERRAIN_CUBE_DIFFUSE						#}	"terrain_cube_diffuse",
	{# TEX_TERRAIN_SPHERE_DIFFUSE					#}	"terrain_sphere_diffuse",
	{# TEX_TERRAIN_TREE_DIFFUSE						#}	"terrain_tree_diffuse",
	{# TEX_TERRAIN_TREE_CUTS_DIFFUSE				#}	"terrain_tree_cuts_diffuse",
	{# TEX_TERRAIN_OBELISK_DIFFUSE					#}	"obelisk_diffuse",
	{# TEX_STRUCTURE_WALLS							#}	"structure_walls",
	{# TEX_STRUCTURE_GROUND							#}	"structure_ground",
	{# TEX_METAL_GRIPPED_DIFFUSE					#}	"metal_gripped_diffuse",
	{# TEX_METAL_RUSTY_02							#}	"metal_rusty_02",
	{# TEX_MARBLE									#}	"marble",
	{# TEX_WOODEN_BEAM								#}	"wooden_beam",
	
	{# TEX_DIF_BRICK_00								#}	"brick_00_diff",
	{# TEX_NRM_BRICK_00								#}	"brick_00.nrm",
	{# TEX_DIF_BRICK_01								#}	"brick_01_diff",
	{# TEX_NRM_BRICK_01								#}	"brick_01.nrm",
	
	{# TEX_NANOSUIT_BODY_DIFF_EMISS					#}	"nano_suit/nanosuit_body.sbgr_a",
	{# TEX_NANOSUIT_BODY_SPEC_ROUGH					#}	"nano_suit/nanosuit_body_spec.sbgr_a",
	{# TEX_NANOSUIT_BODY_NORM						#}	"nano_suit/nanosuit_body.nrm",
	{# TEX_NANOSUIT_NECK_DIFF						#}	"nano_suit/nanosuit_neck",
	{# TEX_NANOSUIT_NECK_SPEC_ROUGH					#}	"nano_suit/nanosuit_neck_spec.sbgr_a",
	{# TEX_NANOSUIT_NECK_NORM						#}	"nano_suit/nanosuit_neck.nrm",
	{# TEX_NANOSUIT_HELMET_DIFF_EMISS				#}	"nano_suit/nanosuit_helmet.sbgr_a",
	{# TEX_NANOSUIT_HELMET_SPEC_ROUGH				#}	"nano_suit/nanosuit_helmet_spec.sbgr_a",
	{# TEX_NANOSUIT_HELMET_NORM						#}	"nano_suit/nanosuit_helmet.nrm",
	
	{# TEX_NORM_TEST_00								#}	"norm_test/norm_00.nrm",
	
	{# TEX_CERBERUS_ALBEDO							#}	"cerberus/Textures/Cerberus_A",
	{# TEX_CERBERUS_NORMAL							#}	"cerberus/Textures/Cerberus_N.nrm",
	{# TEX_CERBERUS_METALLIC						#}	"cerberus/Textures/Cerberus_M.linear",
	{# TEX_CERBERUS_ROUGHNESS						#}	"cerberus/Textures/Cerberus_R.linear",
	
};

^EOF_MARKER^
